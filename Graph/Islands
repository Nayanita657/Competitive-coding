An island is a small piece of land surrounded by water . A group of islands is said to be connected if we can reach from any given island to any other island in the same group . Given V islands (numbered from 1 to V) and E connections or edges between islands. Can you count the number of connected groups of islands.
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains two integers, that denote that there exists an edge between vertex a and b. 
Output Format :
Print the count the number of connected groups of islands
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V-1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
5 8
0 1
0 4
1 2
2 0
2 4
3 0
3 2
4 3
Sample Output 1:
1 
********************************************************SOLUTION************************************************************
#include <bits/stdc++.h>
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

vector<int> BFS_helper(int **graph, int V, int *visited, int start_vertex)
{
    vector<int> v2;
    queue<int> pending_Queue;
    pending_Queue.push(start_vertex);
    visited[start_vertex] = 1;
    while(!pending_Queue.empty())
    {
        int cv = pending_Queue.front();
        v2.push_back(cv);
        pending_Queue.pop();
        for(int i = 0; i < V; i++)
        {
            if(cv == i)
                continue;
            else
            {
                if(graph[cv][i] == 1 && visited[i] == 0)
                {
                    visited[i] = 1;
                    pending_Queue.push(i);
                }
            }
        }
    }
    sort(v2.begin() , v2.end());
    return v2;
}

int BFS(int **graph, int V)
{
    int count = 0;
    int *visited = new int[V];
    for(int i = 0; i < V; i++)
    {
        visited[i] = 0;
    }
    //vector<vector<int>> finalList;
    for(int i = 0; i < V; i++)
    {
        if(visited[i] == 0)
        {
            vector<int> v1;
            v1 = BFS_helper(graph, V, visited,i);
            
                count++;
            //finalList.push_back(v1);
        }
    }
    
    return count;
}

int main()
{
    int V,E;
    cin>>V>>E;
    int **graph = new int*[V];
    for(int i = 0; i < V; i++)
    {
        graph[i] = new int[V];
        for(int j = 0; j < V; j++)
        {
            graph[i][j] = 0;
        }
    }
    
    for(int i = 0; i < E; i++)
    {
        int s, f;
        cin>>s>>f;
        graph[s][f] = 1;
        graph[f][s] = 1;
    }
    cout<<BFS(graph , V);
    
}


TC = O( V + E)
SC = O(V ^ 2)
