Given an undirected and disconnected graph G(V, E), print its BFS traversal.
Note:
1. Here you need to consider that you need to print BFS path starting from vertex 0 only. 
2. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
3. E is the number of edges present in graph G.
4. Take graph input in the adjacency matrix.
5. Handle for Disconnected Graphs as well
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains space separated two integers, that denote that there exists an edge between vertex a and b.
Output Format :
Print the BFS Traversal, as described in the task.
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
0 1 3 2
***********************************************************SOLUTION**************************************************************
#include <bits/stdc++.h>
using namespace std;
#include <queue>

void print(int **graph, int V, int sv, int *visited)
{
    queue<int> pendingNodes;
    pendingNodes.push(sv);
    visited[sv] = 1;
    while(pendingNodes.size() != 0)
    {
        
        int currentNode = pendingNodes.front();
        cout<<currentNode<<" ";
        
        pendingNodes.pop();
        for(int i = 0; i < V; i++)
        {
            if(currentNode == i)
            {
                continue;
            }
            else
            {
                if(graph[currentNode][i] == 1)
                {
                    if(visited[i] == 0)
                	{
                        visited[i] = 1;
                    	pendingNodes.push(i);
                	}
                }
                
            }
        }
    }
}

void BFS_helper(int **graph, int V, int sv, int *visited)
{
    
    for(int i = 0; i < V; i++)
    {
        if(visited[i] != 1)
        {
            print(graph, V, i, visited);
        }
    }
}

int main()
{
    int V, E;
    cin>>V>>E;
    if(E == 0)
    {
        for(int i = 0; i < V; i++)
        {
            cout<<i<<" ";
        }
    }
    else
    {
        int **graph = new int*[V];
    	for(int i = 0; i < V; i++)
    	{
        	graph[i] = new int[V];
        	for(int j = 0; j < V; j++)
        	{
            	graph[i][j] = 0;
        	}
    	}
    
    	for(int i = 0; i < E; i++)
    	{
        	int s, e;
        	cin>>s>>e;
        	graph[s][e] = 1;
        	graph[e][s] = 1;
    	}
    
    	int *visited = new int[V];
    	for(int i = 0; i < V; i++)
    	{
        	visited[i] = 0;
    	}
    
    	BFS_helper(graph,V,0,visited);
        
    }
    
}

****************************************************TIME COMPLEXITY****************************************************
TC = O(V + E)
SC = O(V^2)
WHERE V IS NUMBER OF VERTICES IN THE INPUT GRAPH AND E IS THE NUMBER OD EDGES IN THE INPUT GRAPH
