Given a graph with N vertices (numbered from 0 to N-1) and M undirected edges, then count the distinct 3-cycles in the graph. A 3-cycle PQR is a cycle in which (P,Q), (Q,R) and (R,P) are connected by an edge.
Input Format :
The first line of input contains two space separated integers, that denotes the value of N and M.
Each of the following M lines contain two integers, that denote the vertices which have an undirected edge between them. Let us denote the two vertices with the symbol u and v. 
Output Format :
Print the count the number of 3-cycles in the given graph
Constraints :
0 <= N <= 100
0 <= M <= (N*(N-1))/2
0 <= u <= N - 1
0 <= v <= N - 1
Time Limit: 1 sec
Sample Input 1:
3 3
0 1
1 2
2 0
Sample Output 1:
1

********************************************************SOLUTION************************************************************
#include <iostream>
using namespace std;

int countCycle(int **graph, int V)
{
    int count = 0;
    for(int i = 0; i < V; i++)
    {
        int n1, n2;
        for(int j = 0; j < V; j++)
        {
            if(graph[i][j] == 1)
            {
                n1 = j;
                for(int k = 0; k < V; k++)
                {
                    if(graph[j][k] == 1 && graph[i][k] == 1)
                    	count++;
                    
                }
            }
        }
    }
    return count;
}

int main()
{
    int V,E;
    cin>>V>>E;
    int **graph = new int*[V];
    for(int i = 0; i < V; i++)
    {
        graph[i] = new int[V];
        for(int j = 0; j < V; j++)
        {
            graph[i][j] = 0;
        }
    }
    
    for(int i = 0; i < E; i++)
    {
        int s,f;
        cin>>s>>f;
        graph[s][f] = 1;
        graph[f][s] = 1;
    }
    
    int result = countCycle(graph, V);
    cout<<result/6;
}

TC = O(V ^ 3)
SC = O(V ^ 2)
